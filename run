#!/usr/bin/env bash

set -o errexit
set -o pipefail

DC="${DC:-exec}"
TAGS="${TAGS:all}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

FORCE_FLAG=""
if [[ $FORCE == 1 ]]; then
  FORCE_FLAG="--force"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------
function _echo_run {
  echo "$1"
  # shellcheck disable=SC2091
  # shellcheck disable=SC2116
  $(echo "$1")
}

# -----------------------------------------------------------------------------
function all {
  # Run the provisioning task
  provision
}

function install {
  # Install everything
  install:xcode
  install:ansible
  install:repo
}

function install:ansible {
  # Install ansible
  pip:upgrade
  pip:install_ansible
}

function install:xcode {
  echo "Install Xcode"
  # shellcheck disable=SC2069
  xcode-select -p 2>&1 >/dev/null || xcode-select --install
	# shellcheck disable=SC2006
	if [ "`xcode-select -p`" != "/Library/Developer/CommandLineTools" ]; then sudo xcode-select -switch /Library/Developer/CommandLineTools; fi
}

function install:repo {
  # Install the repo dependencies
  ansible:requirements
  git:submodules
}

function provision {
  echo "Run the ansible-playbook, TAGS: \"${TAGS}\""
  playbook --tags="${TAGS}"
}

function step {
  echo "Run the ansible-playbook with steps"
  playbook --step
}

function playbook {
  echo "Run the ansible-playbook, arguments: '${*}'"
  ansible-playbook main.yml -K "${@}"
}

function list-tags {
  _echo_run "ansible-playbook main.yml --list-tags"
}

function git:submodules {
  echo "Update the submodule geerlingguy.mac-dev-playbook"
	git submodule update --init --recursive
}

function pip:upgrade {
  # Upgrade pip
  echo "Upgrade pip"
	python3 -m pip install --upgrade pip
	python3 -m ensurepip --upgrade
}

function pip:install_ansible {
  echo "Install ansible"
  pip:upgrade
	pip3 install ansible --user
}

function ansible:requirements {
  echo "Install ansible requirements"
	ansible-galaxy install -r requirements.yml "${FORCE_FLAG}"
}

function clean {
  echo "Clean up"
	rm -rf ./roles/elliotweiser.osx-command-line-tools
	rm -rf ./roles/geerlingguy.dotfiles
}

function help {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"

  compgen -A function | grep -v "^_" | cat -n

  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"